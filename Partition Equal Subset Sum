// recursive
class Solution {
    public boolean canPartition(int[] nums) {
        int sum=0;
        for(int i : nums)
            sum+= i;
        if(sum%2!=0) return false;
        return func(nums, sum/2, nums.length);
    }
     public boolean func(int []arr, int target,int n){
         if(target==0) return true;
         if(n==0) return false;
         if(arr[n-1]<=target) return func(arr,target-arr[n-1],n-1) || func(arr,target,n-1);
         else return func(arr,target,n-1);
     }
}

// using dp
class Solution {
    public boolean canPartition(int[] nums) {
        int sum=0;
        for(int i : nums)
            sum+= i;
        if(sum%2!=0) return false;
        int n=nums.length, target=sum/2;
        boolean dp[][] = new boolean [n+1][target+1];
        for(int j=0;j<target+1;j++)
            dp[0][j]= false;
        for(int i=0;i<n+1;i++)
            dp[i][0]= true;
        for(int i=1;i<n+1;i++){
            for(int j=1;j<target+1;j++){
                if(nums[i-1]<=j) dp[i][j] = dp[i-1][j- nums[i-1]] || dp[i-1][j];
                else dp[i][j] =dp[i-1][j];
            }
        }
        return dp[n][target];
    }
 }
